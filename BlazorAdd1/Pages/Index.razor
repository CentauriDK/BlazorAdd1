@page "/"


@using System.Net.Http
@using System.Threading.Tasks
@inject ApiService ApiService

<PageTitle>Add Test</PageTitle>

<div>
    @foreach (var contact in contacts)
    {

        <div class="row">
            <div class="col-3">
                <label>Name</label>
                <input type="text" class="form-control" placeholder="Name" @bind="contact.Name" @oninput="async () => await ValidateName(contact)" />
                @if (!string.IsNullOrEmpty(contact.NameValidationResult))
                {
                    <div class="text-danger">@contact.NameValidationResult</div>
                }
            </div>

            <div class="col-3">
                <label>Phone</label>
                <input type="text" class="form-control" placeholder="Phone Number" @bind="contact.PhoneNumber" @oninput="async () => await ValidatePhoneNumber(contact)" />
                @if (!string.IsNullOrEmpty(contact.PhoneValidationResult))
                {
                    <div class="text-danger">@contact.PhoneValidationResult</div>
                }
            </div>

            <div class="col-3">
                <br>
                <button class="btn btn-danger" @onclick="() => RemoveContact(contact)">Remove</button>
            </div>

            <div class="col-3">
                
            </div>
        </div>

        <div class="form-group">
            
            
            
            
           
        </div>
    }
</div>
<br />
<button class="btn btn-primary" @onclick="AddContact">Add Contact</button>

@code {
    private List<ContactItem> contacts = new List<ContactItem>();

    private async Task ValidateName(ContactItem contact)
    {
        contact.NameValidationResult = await ApiService.ValidateNameAsync(contact.Name);
        await InvokeAsync(() => { }); // Update the UI
    }

    private async Task ValidatePhoneNumber(ContactItem contact)
    {
        contact.PhoneValidationResult = await ApiService.ValidatePhoneNumberAsync(contact.PhoneNumber);
        await InvokeAsync(() => { }); // Update the UI
    }

    private void AddContact()
    {
        contacts.Add(new ContactItem());
    }

    private void RemoveContact(ContactItem contact)
    {
        contacts.Remove(contact);
    }



    public class ContactItem
    {
        public string Name { get; set; }
        public string PhoneNumber { get; set; }
        public string NameValidationResult { get; set; }
        public string PhoneValidationResult { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        AddContact();
    }
}